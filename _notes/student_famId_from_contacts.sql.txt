WITH DumbTable AS (
  SELECT
    'THIS' AS ThatField
  FROM DUAL
),
PossibleFamilies AS (SELECT
  StudentNumbers,
  StudentCount,
  ActiveStudentCount,
  GradeLvl_Min, 
  GradeLvl_Max,
  FamilyIdents,
  FamilyIdentCount,
  FamilyIdentCountDistinct,
  YoungestDob,
  FamilyIdentStatus,
  CASE 
    WHEN FamilyIdentStatus = 0 THEN TO_CHAR(ROWNUM + MaxFamIdentVal)
    WHEN FamilyIdentStatus = 1 THEN TO_CHAR('SOME_MISSING')
    WHEN FamilyIdentStatus = 2 THEN TO_CHAR('ALL_SAME')
    WHEN FamilyIdentStatus = 3 THEN TO_CHAR('MULT_F_IDs')  
  END AS CalcdNewFamilyIdent

FROM (SELECT 
  RelatedOrigContacts,
  RelatedOrigContactCount,
  LISTAGG(s.Student_Number, ',') WITHIN GROUP (ORDER BY s.Student_Number) StudentNumbers,
  COUNT(StudentDcid) AS StudentCount,
  COUNT(CASE WHEN s.Enroll_Status < 1 THEN 1 END) AS ActiveStudentCount,
  MIN(s.Grade_Level) AS GradeLvl_Min,
  MAX(s.Grade_Level) AS GradeLvl_Max,
  LISTAGG(s.Family_Ident, ',') WITHIN GROUP (ORDER BY s.Family_Ident) FamilyIdents,
  COUNT(s.Family_Ident) AS FamilyIdentCount,
  COUNT(DISTINCT s.Family_Ident) AS FamilyIdentCountDistinct,
  MIN(TO_CHAR(s.DOB, 'YYYY-MM-DD')) YoungestDob,
  CASE
    WHEN COUNT(DISTINCT s.Family_Ident) = 0 THEN 0
    WHEN (COUNT(DISTINCT s.Family_Ident) = 1 
                 AND SUM(DECODE(s.Family_Ident,NULL,1,0)) > 0) THEN 1
    WHEN (COUNT(DISTINCT s.Family_Ident) = 1 
                 AND SUM(DECODE(s.Family_Ident,NULL,1,0)) = 0) THEN 2
    WHEN COUNT(DISTINCT s.Family_Ident) > 1 THEN 3
  END AS FamilyIdentStatus,
  MAX(TO_NUMBER(StudentFamilyIdents.MaxVal)) MaxFamIdentVal

FROM (SELECT 
  StudentDcid,
  LISTAGG(RelatedOriginalContact, ',') WITHIN GROUP (ORDER BY RelatedOriginalContact) RelatedOrigContacts,
  COUNT(RelatedOriginalContact) AS RelatedOrigContactCount

FROM (SELECT DISTINCT
  StudentDcid,
  RelatedOriginalContact

FROM (SELECT
  s1.Dcid AS s1Dcid,
  s2.Dcid AS s2Dcid,
  p1.Id AS Person1Id, 
  p2.Id AS Person2Id, 
  p3.Id AS Person3Id

  FROM Person p1

  JOIN StudentContactAssoc sca1
    ON p1.Id = sca1.PersonId

  JOIN OriginalContactMap ocm1
    ON sca1.StudentContactAssocid = ocm1.StudentContactAssocId
    AND LOWER(ocm1.OriginalContactType) IN ('mother', 'father', 'guardian')

  JOIN Students s1 
    ON sca1.StudentDcid = s1.Dcid

  JOIN StudentContactAssoc sca2
    ON s1.Dcid = sca2.StudentDcid

  JOIN Person p2
    ON sca2.PersonId = p2.Id

  JOIN OriginalContactMap ocm2
    ON sca2.StudentContactAssocid = ocm2.StudentContactAssocId
    AND LOWER(ocm2.OriginalContactType) IN ('mother', 'father', 'guardian')

  JOIN Students s2 
    ON sca2.StudentDcid = s2.Dcid

  JOIN StudentContactAssoc sca3
    ON s2.Dcid = sca3.StudentDcid

  JOIN  Person p3
    ON sca3.PersonId = p3.Id

  JOIN  OriginalContactMap ocm3
    ON sca3.StudentContactAssocid = ocm3.StudentContactAssocId
    AND LOWER(ocm3.OriginalContactType) IN ('mother', 'father', 'guardian')
   ) 

  UNPIVOT
    ( StudentDcid FOR (SOURCE_S) IN
      ( s1Dcid AS 'S1',
        s2Dcid AS 'S2'
      )
    )

  UNPIVOT
    ( RelatedOriginalContact FOR (SOURCE_P) IN
      ( Person1Id AS 'P1',
        Person2Id AS 'P2',
        Person3Id AS 'P3'
      )
    )
  )
  GROUP BY StudentDcid
  ORDER BY StudentDcid
  )

  CROSS JOIN (SELECT MAX(TO_NUMBER(stdnt.Family_Ident)) AS MaxVal FROM Students stdnt) StudentFamilyIdents

  JOIN Students s 
    ON StudentDcid = s.Dcid

  GROUP BY RelatedOrigContacts, RelatedOrigContactCount

  ORDER BY LISTAGG(s.Family_Ident, ',') WITHIN GROUP (ORDER BY s.Family_Ident) NULLS FIRST,  
                      MIN(s.DOB)
)
)
SELECT 
  REGEXP_SUBSTR(pofams.StudentNumbers, CHR(91) || '^,' || CHR(93) || '+', 1, column_value) AS Student_Number,
  pofams.CalcdNewFamilyIdent AS Proposed_Family_Ident

FROM PossibleFamilies pofams,
     TABLE(CAST(MULTISET(SELECT LEVEL FROM DUAL
                         CONNECT BY LEVEL <= REGEXP_COUNT(pofams.StudentNumbers, ',') + 1
                      ) as sys.odcinumberlist))
  